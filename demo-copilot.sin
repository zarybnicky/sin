





static uint32_t s0[(1)] = {(0)};
static size_t s0_idx = (0);

uint32_t s0_gen(void) {
  return (((s0)[s0_idx]) + (1)) % (51);
}

bool writeOut_guard(void) {
  return true;
}

uint32_t writeOut_arg0(void) {
  return (((uint32_t [(51)]){(2), (2), (4), (2), (2), (4), (2), (2), (3), (1), (8), (2), (2), (3), (1), (2), (2), (2), (1), (1), (2), (2), (2), (2), (4), (4), (2), (2), (4), (2), (2), (4), (2), (2), (3), (1), (8), (2), (2), (2), (2), (2), (2), (2), (1), (1), (2), (2), (2), (2), (8)})[(s0)[s0_idx]]) * (150);
}

bool play_guard(void) {
  return true;
}

uint32_t play_arg0(void) {
  return ((uint32_t [(51)]){(165), (165), (165), (165), (165), (165), (165), (196), (131), (147), (165), (175), (175), (175), (175), (175), (165), (165), (165), (165), (165), (147), (147), (165), (147), (196), (165), (165), (165), (165), (165), (165), (165), (196), (131), (147), (165), (175), (175), (175), (175), (175), (165), (165), (165), (165), (196), (196), (175), (147), (131)})[(s0)[s0_idx]];
}

uint32_t play_arg1(void) {
  return (((uint32_t [(51)]){(2), (2), (4), (2), (2), (4), (2), (2), (3), (1), (8), (2), (2), (3), (1), (2), (2), (2), (1), (1), (2), (2), (2), (2), (4), (4), (2), (2), (4), (2), (2), (4), (2), (2), (3), (1), (8), (2), (2), (2), (2), (2), (2), (2), (1), (1), (2), (2), (2), (2), (8)})[(s0)[s0_idx]]) * (150);
}

void step(void) {
  uint32_t s0_tmp;
  if ((writeOut_guard)()) {
    (writeOut)(((writeOut_arg0)()));
  };
  if ((play_guard)()) {
    (play)(((play_arg0)()), ((play_arg1)()));
  };
  (s0_tmp) = ((s0_gen)());
  ((s0)[s0_idx]) = (s0_tmp);
  (s0_idx) = ((++(s0_idx)) % (1));
}
void writeOut(uint32_t d) {
  Serial.println(d);
}

void play(uint32_t note, uint32_t duration) {
  tone(8, note, duration);
  delay(duration * 1.2);
  noTone(8);
}

void setup(void) {
  Serial.begin(9600);
  pinMode(8, OUTPUT);
}

void loop(void) {
  step();
}
